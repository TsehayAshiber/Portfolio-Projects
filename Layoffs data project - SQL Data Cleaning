SELECT *
FROM layoffs;

SET GLOBAL max_allowed_packet=1073741824;
-- DATA cleaning
-- 1) Remove duplicates
-- Make sure you make a copy of the table and work on the copy table since we are altering the dataset
-- create the duplicate table
CREATE TABLE layoffs_staging
LIKE layoffs;
-- CHECK IF TABLE HAS BEEN CREATED
SELECT *
FROM layoffs_staging;

-- inseret data
INSERT INTO layoffs_staging
SELECT *
FROM layoffs;

-- Removing duplicate
-- is there a unique row id. if not create a row number
SELECT *,
ROW_NUMBER() OVER(PARTITION BY company, industry, total_laid_off, percentage_laid_off, 'date') as row_num
FROM layoffs_staging;

-- FILTER THOSE WITH MORE THAN 1 ROW NUMBER (THOSE ARE DUPLICATES BUT TAKE A CLOSER LOOK BEFORE DELETING THEM
-- USE CTE 

WITH duplicate_cte AS
(SELECT *,
ROW_NUMBER() OVER(PARTITION BY company, industry, total_laid_off, percentage_laid_off, 'date', stage, country, funds_raised_millions) as row_num
FROM layoffs_staging
)
SELECT*
FROM duplicate_cte
WHERE row_num > 1
;
SELECT *
FROM layoffs_staging 
WHERE company = 'Oyster'
;

-- to delete the duplicate row
-- Creating another table that has the extra rows and deleting the extra rows since we can nt delete the CTE table on mysql
-- COPY THE CREAT STATMENT FROM THE TABLE ITSELF - TABLE - COPY TO CLIPBOARD- CREATE STATMENT
CREATE TABLE `layoffs_staging2` (
  `company` text,
  `location` text,
  `industry` text,
  `total_laid_off` int DEFAULT NULL,
  `percentage_laid_off` text,
  `date` text,
  `stage` text,
  `country` text,
  `funds_raised_millions` int DEFAULT NULL,
  `row_num`INT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

SELECT *
FROM layoffs_staging2
WHERE row_num >1
;

INSERT INTO layoffs_staging2
SELECT *,
ROW_NUMBER() OVER(PARTITION BY company, industry, total_laid_off, percentage_laid_off, 'date',stage, country, funds_raised_millions) as row_num
FROM layoffs_staging;

SELECT *
FROM layoffs_staging2
WHERE row_num > 1;

-- delete the rows now
SET SQL_SAFE_UPDATES = 0;
DELETE
FROM layoffs_staging2
where row_num > 1;
SELECT *
FROM layoffs_staging2
where row_num > 1;
-- 2) Standardize Data
-- Finding issues in the data and fixing it. For instance SPACE and unecessary punctuations like .alter

SELECT *
FROM layoffs_staging2;
-- TRIM

SELECT company, TRIM(COMPANY)
FROM layoffs_staging2;
-- to updat the trim use update
UPDATE layoffs_staging2
SET company = TRIM(company);

SELECT DISTINCT INDUSTRY
FROM layoffs_staging2
ORDER BY 1;

SELECT *
FROM layoffs_staging2
WHERE industry LIKE 'Crypto%';

UPDATE layoffs_staging2
SET industry = 'Crypto'
WHERE industry LIKE 'Crypto%';

SELECT DISTINCT INDUSTRY
FROM layoffs_staging2
ORDER BY 1;
SELECT DISTINCT location
FROM layoffs_staging2
ORDER BY 1;

SELECT DISTINCT country
FROM layoffs_staging2
ORDER BY 1;
-- United states entred with . at the end

SELECT DISTINCT country, TRIM(Trailing '.' FROM country)
FROM layoffs_staging2
ORDER BY 1;
-- Then update

UPDATE layoffs_staging2
SET country = TRIM(Trailing '.' FROM country)
WHERE Country LIKE 'United States%';
-- date is text we need to change it to time date format

SELECT `date`,
str_to_date(`date`, '%m/%d/%Y')
FROM layoffs_staging2;

UPDATE layoffs_staging2
SET `date` = str_to_date(`date`, '%m/%d/%Y');

SELECT `date`
FROM layoffs_staging2;

-- the date colum still shows text., change the column to date format

ALTER TABLE layoffs_staging2
MODIFY COLUMN `date` DATE;

-- 3) Null Values or blank values
SELECT *
FROM layoffs_staging2
WHERE total_laid_off IS NULL
AND percentage_laid_off IS NULL;

SELECT DISTINCT industry
FROM layoffs_staging2;

SELECT *
FROM layoffs_staging2
WHERE industry IS NULL
or industry = '';

SELECT *
FROM layoffs_staging2
